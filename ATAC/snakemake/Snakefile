import os
from re import search
import getpass


############
## Config ##
############

configfile: "config.yaml"

###########
## Rules ##
###########

rule all:
    input:
        # Basic archR processing
        expand(config["directories"]["archr_directory"] + "/{sample}.arrow", sample=config["samples"]),
        config["directories"]["archr_directory"] + "/Save-ArchR-Project.rds",
        config["directories"]["archr_directory"] + "/sample_metadata_after_archR.txt.gz",

        # QC
        config["directories"]["results"] + "/qc/sample_metadata_after_qc.txt.gz",
        
        # Add group coverage
        config["directories"]["archr_directory"] + "/projectMetadata.rds",
        
        # Peak calling
        config["directories"]["archr_directory"] + "/PeakCalls/PeakSet.rds",
        config["directories"]["results"] + "/PeakCalls/peaks2genes/peaks2genes_all.txt.gz",
        config["directories"]["results"] + "/PeakCalls/peaks2genes/peaks2genes_nearest.txt.gz",
        config["directories"]["results"] + "/Background-Peaks.rds",

        # Dimensionality reduction
        expand(config["directories"]["results"] + "/dimensionality_reduction/{matrix}/batch_correction_{dimred_batch_variable}_{batch_method}/lsi_nfeatures{dimred_nfeatures}_ndims{dimred_ndims}_{incl_samples}.txt.gz",
            dimred_batch_variable = config["dimensionality_reduction"]["batch_variable"],
            matrix = config["dimensionality_reduction"]["matrix"],
            dimred_nfeatures = config["dimensionality_reduction"]["nfeatures"],
            dimred_ndims = config["dimensionality_reduction"]["ndims"],
            incl_samples = config["dimensionality_reduction"]["incl_samples"],
            batch_method = config["dimensionality_reduction"]["batch_method"]
        ),

        # Clustering
        expand(config["directories"]["results"] + "/clustering/{matrix}/batch_correction_{dimred_batch_variable}_{batch_method}/cluster_res{res}_{incl_samples}/sample_metadata_after_clustering.txt.gz",
            dimred_batch_variable = config["clustering"]["batch_variable"],
            matrix = config["clustering"]["matrix"],
            res = config["clustering"]["resolution"],
            incl_samples = config["clustering"]["incl_samples"],
            batch_method = config["clustering"]["batch_method"]
        ),

        # Add gene scores
        config["directories"]["results"] + "/addGeneScoreMatrix_completed.txt",

        # Save ATAC matrices
        expand(config["directories"]["results"] + "/Matrices/{matrix}_summarized_experiment.rds",
            matrix = config["save_atac_matrices"]["matrix"]
        ),

        # Pseudobulk
        expand(config["directories"]["results"] + "/pseudobulk/{group_by}/{matrix}/pseudobulk_with_replicates.rds",
            matrix = config["pseudobulk_atac_with_replicates"]["matrix"],
            group_by = config["pseudobulk_atac_with_replicates"]["group_by"]
        ),

        # Differential accessibility
        expand(config["directories"]["results"] + "/pseudobulk/{group_by}/{matrix}/DE_res/DEG_overview.txt",
            matrix = config["differential_accessibility_pseudobulk"]["matrix"],
            group_by = config["differential_accessibility_pseudobulk"]["group_by"]
        ),

        # Add motif annotation
        expand(config["directories"]["results"] + "/Annotations/{motif_annotation}_motif2gene.txt.gz",
            motif_annotation = config["add_motif_annotation"]["motif_annotation"]
        )

########################
## Create arrow files ##
########################

rule create_arrow_files:
    input:
        script = config["scripts"]["create_arrow_files"],
        fragments_files = config["directories"]["original_data"] + "/{sample}/atac_fragments.tsv.gz"
    output:
        config["directories"]["archr_directory"] + "/{sample}.arrow"
    params:
        outdir = config["directories"]["archr_directory"],
        sample = config["samples"],
        genome = config["resources"]["genome"],
        min_fragments = config["create_arrow_files"]["min_fragments"],
        max_fragments = config["create_arrow_files"]["max_fragments"],
        min_tss_score = config["create_arrow_files"]["min_tss_score"]
    threads: 
        config["slurm"]["create_arrow_files"]["threads"]
    resources:
        mem_mb = config["slurm"]["create_arrow_files"]["memory"]
    log: 
        config["directories"]["logs"] + "/create_arrow_files_{sample}.log"
    shell:
        "Rscript {input.script} --samples {wildcards.sample} --fragments_files {input.fragments_files} --genome {params.genome} --min_fragments {params.min_fragments} --max_fragments {params.max_fragments} --min_tss_score {params.min_tss_score} --threads {threads} --outdir {params.outdir} > {log}"

##########################
## Create ArchR project ##
##########################

rule create_archr_project:
    input:
        script = config["scripts"]["create_archr_project"],
        arrow_files = expand(rules.create_arrow_files.output, sample=config["samples"])
    output:
        config["directories"]["archr_directory"] + "/Save-ArchR-Project.rds"
    params:
        genome = config["resources"]["genome"],
        outdir = config["directories"]["archr_directory"],
        samples = config["samples"]
    threads:
        config["slurm"]["create_archr_project"]["threads"]
    resources:
        mem_mb = config["slurm"]["create_archr_project"]["memory"]
    log:
        config["directories"]["logs"] + "/create_archr_project.log"
    shell:
        "Rscript {input.script} --threads {threads} --samples {params.samples} --arrow_files {input.arrow_files} --genome {params.genome} --threads {threads} --outdir {params.outdir} > {log}"

###########################
## Create ArchR metadata ##
###########################

rule create_archr_metadata:
    input:
        script = config["scripts"]["create_archr_metadata"],
        metadata = config["resources"]["cell_metadata"],
        archr_project = rules.create_archr_project.output # rule order execution
    output:
        config["directories"]["archr_directory"] + "/sample_metadata_after_archR.txt.gz"
    params:
        genome = config["resources"]["genome"],
        samples = config["samples"],
        archr_directory = config["directories"]["archr_directory"]
    threads:
        config["slurm"]["create_archr_metadata"]["threads"]
    resources:
        mem_mb = config["slurm"]["create_archr_metadata"]["memory"]
    log:
        config["directories"]["logs"] + "/create_archr_metadata.log"
    shell:
        "Rscript {input.script} --threads {threads} --samples {params.samples} --archr_directory {params.archr_directory} --metadata {input.metadata} --outfile {output} > {log}"

########
## QC ##
########

rule qc_archr:
    input:
        script = config["scripts"]["qc_archr"],
        metadata = rules.create_archr_metadata.output,
        archr_project = rules.create_archr_project.output
    output:
        config["directories"]["results"] + "/qc/qc_FragmentSizeDistribution.txt.gz",
        config["directories"]["results"] + "/qc/qc_FragmentSizeDistribution.pdf",
        config["directories"]["results"] + "/qc/qc_TSSenrichment.txt.gz",
        config["directories"]["results"] + "/qc/qc_TSSenrichment.pdf",
        config["directories"]["results"] + "/qc/qc_metrics_histogram.pdf",
        config["directories"]["results"] + "/qc/qc_metrics_barplot.pdf",
        metadata = config["directories"]["results"] + "/qc/sample_metadata_after_qc.txt.gz"
    params:
        archr_directory = config["directories"]["archr_directory"],
        samples = config["samples"],
        min_tss_enrichment = config["qc_archr"]["min_tss_enrichment"],
        max_tss_enrichment = config["qc_archr"]["max_tss_enrichment"],
        min_number_fragments = config["qc_archr"]["min_number_fragments"],
        max_number_fragments = config["qc_archr"]["max_number_fragments"],
        max_blacklist_ratio = config["qc_archr"]["max_blacklist_ratio"],
        cutoff_tss_enrichment = config["qc_archr"]["cutoff_tss_enrichment"],
        cutoff_number_fragments = config["qc_archr"]["cutoff_number_fragments"],
        metadata_rna = config["qc_archr"]["metadata_rna"],
        outdir = config["directories"]["results"] + "/qc"
    threads:
        config["slurm"]["qc_archr"]["threads"]
    resources:
        mem_mb = config["slurm"]["qc_archr"]["memory"]
    log:
        config["directories"]["logs"] + "/qc_archr.log"
    shell:
        "Rscript {input.script} --threads {threads} --samples {params.samples} --archr_directory {params.archr_directory} --metadata {input.metadata} --metadata_rna {params.metadata_rna} --min_tss_enrichment {params.min_tss_enrichment} --min_number_fragments {params.min_number_fragments} --max_tss_enrichment {params.max_tss_enrichment} --max_number_fragments {params.max_number_fragments} --max_blacklist_ratio {params.max_blacklist_ratio} --cutoff_TSS_enrichment {params.cutoff_tss_enrichment} --cutoff_nFrag {params.cutoff_number_fragments} --threads {threads} --outdir {params.outdir} > {log}"

########################
## Add group coverage ##
########################

rule add_group_coverage:
    input:
        script = config["scripts"]["add_group_coverage"],
        metadata = rules.qc_archr.output.metadata
    output:
    	config["directories"]["archr_directory"] + "/projectMetadata.rds"
    params:
        archr_directory = config["directories"]["archr_directory"],
    	group_by = config["add_group_coverage"]["group_by"],
        min_cells = config["add_group_coverage"]["min_cells"],
        max_cells = config["add_group_coverage"]["max_cells"]
    threads:
        config["slurm"]["add_group_coverage"]["threads"]
    resources:
        mem_mb = config["slurm"]["add_group_coverage"]["memory"]
    log:
        config["directories"]["logs"] + "/add_group_coverage.log"
    shell:
        "Rscript {input.script} --threads {threads} --archr_directory {params.archr_directory} --metadata {input.metadata} --group_by {params.group_by} --min_cells {params.min_cells} --max_cells {params.max_cells} --threads {threads} > {log}"

##################
## Peak calling ##
##################

rule peak_calling:
    input:
        group_coverage = rules.add_group_coverage.output,
        script = config["scripts"]["peak_calling"],
        metadata = rules.qc_archr.output.metadata,
    output:
        rds = config["directories"]["archr_directory"] + "/PeakCalls/PeakSet.rds",
        peak_metadata = config["directories"]["archr_directory"] + "/PeakCalls/peak_metadata.tsv.gz",
        bed = config["directories"]["archr_directory"] + "/PeakCalls/peaks_archR_macs2.bed.gz"
    params:
        archr_directory = config["directories"]["archr_directory"],
        group_by = config["peak_calling"]["group_by"],
        pathToMacs2 = config["peak_calling"]["pathToMacs2"],
        pvalue_cutoff = config["peak_calling"]["pvalue_cutoff"],
        extend_summits = config["peak_calling"]["extend_summits"],
        min_cells = config["peak_calling"]["min_cells"],
        outdir = config["directories"]["archr_directory"] + "/PeakCalls"
    threads:
        config["slurm"]["peak_calling"]["threads"]
    resources:
        mem_mb = config["slurm"]["peak_calling"]["memory"]
    log:
        config["directories"]["logs"]+"/peak_calling.log"
    shell:
        "Rscript {input.script} --threads {threads} --archr_directory {params.archr_directory} --metadata {input.metadata} --pathToMacs2 {params.pathToMacs2} --group_by {params.group_by} --min_cells {params.min_cells} --pvalue_cutoff {params.pvalue_cutoff} --extend_summits {params.extend_summits} --threads {threads} --outdir {params.outdir} > {log}"

rule link_peaks_to_genes:
    input:
        script = config["scripts"]["link_peaks_to_genes"],
        gene_metadata = config["resources"]["gene_metadata"],
        peak_metadata = rules.peak_calling.output.peak_metadata
    output:
        peaks_all = config["directories"]["results"] + "/PeakCalls/peaks2genes/peaks2genes_all.txt.gz",
        peaks_nearest = config["directories"]["results"] + "/PeakCalls/peaks2genes/peaks2genes_nearest.txt.gz"
    params:
        gene_window = config["link_peaks_to_genes"]["gene_window"],
        outdir = config["directories"]["results"] + "/PeakCalls/peaks2genes"
    threads:
        config["slurm"]["link_peaks_to_genes"]["threads"]
    resources:
        mem_mb = config["slurm"]["link_peaks_to_genes"]["memory"]
    log:
        config["directories"]["logs"]+"/link_peaks_to_genes.log"
    shell:
        "Rscript {input.script} --gene_metadata {input.gene_metadata} --peak_metadata {input.peak_metadata} --gene_window {params.gene_window} --outdir {params.outdir} > {log}"

rule add_background_peaks:
    input:
        script = config["scripts"]["add_background_peaks"],
        peak_metadata = rules.peak_calling.output.peak_metadata,
        confirmation_prev_rule = rules.link_peaks_to_genes.output.peaks_all # this is not necessary, it's just to make sure that calling background peaks is executed after the PeakMatrix is obtained
    output:
        config["directories"]["results"] + "/Background-Peaks.rds"
    params:
        archr_directory = config["directories"]["archr_directory"],
        method = config["add_background_peaks"]["method"],
        number_background_peaks = config["add_background_peaks"]["number_background_peaks"]
    threads:
        config["slurm"]["add_background_peaks"]["threads"]
    resources:
        mem_mb = config["slurm"]["add_background_peaks"]["memory"]
    log:
        config["directories"]["logs"]+"/add_background_peaks.log"
    shell:
        "Rscript {input.script} --threads {threads} --peak_metadata {input.peak_metadata} --archr_directory {params.archr_directory} --method {params.archr_directory} --number_background_peaks {params.number_background_peaks} > {log}"

##############################
## Dimensionality reduction ##
##############################

rule dimensionality_reduction:
    input:
        script = config["scripts"]["dimensionality_reduction"],
        metadata = rules.qc_archr.output.metadata,
        confirmation_prev_rule = rules.peak_calling.output.rds # dimension reduction is executed after the PeakMatrix is obtained
    output:
        lsi = config["directories"]["results"] + "/dimensionality_reduction/{matrix}/batch_correction_{dimred_batch_variable}_{batch_method}/lsi_nfeatures{dimred_nfeatures}_ndims{dimred_ndims}_{incl_samples}.txt.gz",
        umap = config["directories"]["results"] + "/dimensionality_reduction/{matrix}/batch_correction_{dimred_batch_variable}_{batch_method}/umap_nfeatures{dimred_nfeatures}_ndims{dimred_ndims}_{incl_samples}.txt.gz"
    params:
        archr_directory = config["directories"]["archr_directory"],
        outdir = config["directories"]["results"] + "/dimensionality_reduction/{matrix}/batch_correction_{dimred_batch_variable}_{batch_method}",
        umap_n_neighbors = config["dimensionality_reduction"]["umap_n_neighbors"],
        umap_min_dist = config["dimensionality_reduction"]["umap_min_dist"],
        samples = config["samples"],
        dimred_colour_by = config["dimensionality_reduction"]["colour_by"]
    threads:
        config["slurm"]["dimensionality_reduction"]["threads"]
    resources:
        mem_mb = config["slurm"]["dimensionality_reduction"]["memory"]
    log:
        config["directories"]["logs"] + "/dimensionality_reduction_{matrix}_nfeatures{dimred_nfeatures}_ndims{dimred_ndims}_batch_correction_{dimred_batch_variable}_{batch_method}_{incl_samples}.log"
    shell:
        "Rscript {input.script} --threads {threads} --samples {params.samples} --incl_samples {wildcards.incl_samples} --archr_directory {params.archr_directory} --matrix {wildcards.matrix} --metadata {input.metadata} --nfeatures {wildcards.dimred_nfeatures} --ndims {wildcards.dimred_ndims} --n_neighbors {params.umap_n_neighbors} --min_dist {params.umap_min_dist} --colour_by {params.dimred_colour_by} --batch_variable {wildcards.dimred_batch_variable} --batch_method {wildcards.batch_method} --outdir {params.outdir} > {log}"

################
## Clustering ##
################

rule clustering:
    input:
        script = config["scripts"]["clustering"],
        metadata = rules.qc_archr.output.metadata,
        confirmation_prev_rule = config["directories"]["results"] + "/dimensionality_reduction/{matrix}/batch_correction_{dimred_batch_variable}_{batch_method}/lsi_nfeatures" + str(config["clustering"]["nfeatures"]) + "_ndims" + str(config["clustering"]["ndims"]) + "_{incl_samples}.txt.gz"
        # this last line is not necessary, it's just to make sure that clustering is executed after the dimension reduction is obtained
    output:
        config["directories"]["results"] + "/clustering/{matrix}/batch_correction_{dimred_batch_variable}_{batch_method}/cluster_res{res}_{incl_samples}/sample_metadata_after_clustering.txt.gz"
    params:
        archr_directory = config["directories"]["archr_directory"],
        outdir = config["directories"]["results"] + "/dimensionality_reduction/{matrix}/batch_correction_{dimred_batch_variable}_{batch_method}",
        clusterdir = config["directories"]["results"] + "/clustering/{matrix}/batch_correction_{dimred_batch_variable}_{batch_method}",
        umap_n_neighbors = config["clustering"]["umap_n_neighbors"],
        umap_min_dist = config["clustering"]["umap_min_dist"],
        dimred_nfeatures = config["clustering"]["nfeatures"],
        dimred_ndims = config["clustering"]["ndims"],
        samples = config["samples"],
        reorder_clusters = config["clustering"]["reorder_clusters"]
    threads:
        config["slurm"]["clustering"]["threads"]
    resources:
        mem_mb = config["slurm"]["clustering"]["memory"]
    log:
        config["directories"]["logs"] + "/clustering_{matrix}_batch_correction_{dimred_batch_variable}_{batch_method}_res{res}_{incl_samples}.log"
    shell:
        "Rscript {input.script} --threads {threads} --samples {params.samples} --reorder_clusters {params.reorder_clusters} --incl_samples {wildcards.incl_samples} --archr_directory {params.archr_directory} --matrix {wildcards.matrix} --metadata {input.metadata} --nfeatures {params.dimred_nfeatures} --ndims {params.dimred_ndims} --n_neighbors {params.umap_n_neighbors} --res {wildcards.res} --min_dist {params.umap_min_dist} --batch_variable {wildcards.dimred_batch_variable} --batch_method {wildcards.batch_method} --clusterdir {params.clusterdir} --outdir {params.outdir} > {log}"
        
####################
## Add GeneScores ##
####################

rule add_gene_scores:
    input:
        script = config["scripts"]["add_gene_scores"],
        metadata = rules.qc_archr.output.metadata,
        confirmation_prev_rule = rules.peak_calling.output.rds
    output:
        config["directories"]["results"] + "/addGeneScoreMatrix_completed.txt"
    params:
        archr_directory = config["directories"]["archr_directory"]
    log:
        config["directories"]["logs"] + "/add_gene_scores.log"
    threads:
        config["slurm"]["add_gene_scores"]["threads"]
    resources:
        mem_mb = config["slurm"]["add_gene_scores"]["memory"]
    shell:
        "Rscript {input.script} --threads {threads} --metadata {input.metadata} --archr_directory {params.archr_directory} > {log}"

########################
## Save atac matrices ##
########################

rule save_atac_matrices:
    input:
        script = config["scripts"]["save_atac_matrices"],
        metadata = rules.qc_archr.output.metadata,
        confirmation_prev_rule = rules.add_gene_scores.output # this is not necessary, it's just to make sure that saving atac matrices is executed after adding gene scores
    output:
        config["directories"]["results"] + "/Matrices/{matrix}_summarized_experiment.rds"
    params:
        archr_directory = config["directories"]["archr_directory"]
    log:
        config["directories"]["logs"] + "/{matrix}_save_atac_matrix.log"
    threads:
        config["slurm"]["save_atac_matrices"]["threads"]
    resources:
        mem_mb = config["slurm"]["save_atac_matrices"]["memory"]
    shell:
        "Rscript {input.script} --threads {threads} --metadata {input.metadata} --matrix {wildcards.matrix} --archr_directory {params.archr_directory} --outfile {output} > {log}"

################
## Pseudobulk ##
################

rule pseudobulk_atac_with_replicates:
    input:
        script = config["scripts"]["pseudobulk_atac_with_replicates"],
        metadata = config["pseudobulk_atac_with_replicates"]["metadata"], # note that this is hardcoded in yaml after deciding which clustering makes most sense!
        confirmation_prev_rule = rules.save_atac_matrices.output # this is not necessary, it's just to make sure that creating pseudobulk replicates is executed after saving atac matrices
    output:
        config["directories"]["results"] + "/pseudobulk/{group_by}/{matrix}/pseudobulk_with_replicates.rds"
    params:
        fraction_cells_per_replicate = config["pseudobulk_atac_with_replicates"]["fraction_cells_per_replicate"],
        min_cells = config["pseudobulk_atac_with_replicates"]["min_cells"],
        nrep = config["pseudobulk_atac_with_replicates"]["nrep"]
    log:
        config["directories"]["logs"] + "/pseudobulk_{matrix}_groupby{group_by}.log"
    threads:
        config["slurm"]["pseudobulk_atac_with_replicates"]["threads"]
    resources:
        mem_mb = config["slurm"]["pseudobulk_atac_with_replicates"]["memory"]
    shell:
        "Rscript {input.script} --threads {threads} --metadata {input.metadata} --group_by {wildcards.group_by} --atac_matrix_name {wildcards.matrix} --nrep {params.nrep} --min_cells {params.min_cells} --fraction_cells_per_replicate {params.fraction_cells_per_replicate} > {log}"

################################
## Differential accessibility ##
################################

rule differential_accessibility_pseudobulk:
    input:
        script = config["scripts"]["differential_accessibility_pseudobulk"],
        peak_metadata = rules.peak_calling.output.peak_metadata,
        confirmation_prev_rule = rules.pseudobulk_atac_with_replicates.output # this is not necessary, it's just to make sure that differential analysis is executed after creating pseudobulk replicates
    output:
        config["directories"]["results"] + "/pseudobulk/{group_by}/{matrix}/DE_res/DEG_overview.txt"
    params:
        fdr_cutoff = config["differential_accessibility_pseudobulk"]["fdr_cutoff"],
        logfc_cutoff = config["differential_accessibility_pseudobulk"]["logfc_cutoff"],
        min_cdr = config["differential_accessibility_pseudobulk"]["min_cdr"],
        cluster_ids = config["differential_accessibility_pseudobulk"]["cluster_ids"]
    log:
        config["directories"]["logs"] + "/differential_accessibility_{matrix}_groupby{group_by}.log"
    threads:
        config["slurm"]["differential_accessibility_pseudobulk"]["threads"]
    resources:
        mem_mb = config["slurm"]["differential_accessibility_pseudobulk"]["memory"]
    shell:
        "Rscript {input.script} --peak_metadata {input.peak_metadata} --threads {threads} --group_by {wildcards.group_by} --matrix {wildcards.matrix} --fdr_cutoff {params.fdr_cutoff} --logfc_cutoff {params.logfc_cutoff} --min_cdr {params.min_cdr} --cluster_ids {params.cluster_ids} > {log}"

###########################
## Add TF binding motifs ##
###########################

rule add_motif_annotation:
    input:
        script = config["scripts"]["add_motif_annotation"],
        peakset = rules.peak_calling.output.rds
    output:
        config["directories"]["results"] + "/Annotations/{motif_annotation}_motif2gene.txt.gz"
    params:
        archr_directory = config["directories"]["archr_directory"],
        cutoff = config["add_motif_annotation"]["cutoff"],
        width = config["add_motif_annotation"]["width"]
    log:
        config["directories"]["logs"] + "/add_motif_annotation_{motif_annotation}.log"
    threads:
        config["slurm"]["add_motif_annotation"]["threads"]
    resources:
        mem_mb = config["slurm"]["add_motif_annotation"]["memory"]
    shell:
        "Rscript {input.script} --threads {threads} --peak_calls {input.peakset} --archr_directory {params.archr_directory} --cutoff {params.cutoff} --width {params.width} --motif_annotation {wildcards.motif_annotation} > {log}"
        